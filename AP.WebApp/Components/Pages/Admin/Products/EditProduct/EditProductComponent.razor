<!-- Imports -->
@using AP.CoreBusiness
@using AP.UseCases.Products.Interfaces
@using AP.WebApp.Components.Layouts.AdminPanelLayouts

<!-- Injections -->
@inject IFetchProductByIdUseCase FetchProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<!-- Page Definitions -->
@page "/admin/edit-product/{prodId:int}"
@layout AdminLayout


<div class="inner-container">

    @if (product is not null) {
        <EditForm Model="product" FormName="formProduct" OnValidSubmit="Update">

            <InputNumber @bind-Value="product.ProductId" hidden></InputNumber>

            <div class="form-item">
                <label for="name">Product Name</label>
                <InputText 
                    id="name"
                    @bind-Value="product.ProductName"
                    class="form-control">
                </InputText>
            </div>
            <div class="form-item">
                <label for="quantity">Quantity</label>
                <InputNumber 
                    id="quantity"
                    @bind-Value="product.Quantity"
                    class="form-control">
                </InputNumber>
            </div>
            <div class="form-item">
                <label for="price">Price</label>
                <InputNumber 
                    id="price"
                    @bind-Value="product.Price"
                    class="form-control">
                </InputNumber>
            </div>
            <div class="button-container">
                <button type='submit'>Save Updates</button>
                <a class="cancel-button" href="/product-manager">Cancel</a>
            </div>
        </EditForm> 
    }

</div>

@code {

    // Get Product Id from URL Query
    [Parameter]
    public int prodId {get; set; }

    // Fetch Product 
    [SupplyParameterFromForm]
    private Product? product { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        this.product ??= await FetchProductByIdUseCase.ExecuteAsync(this.prodId);
    }

    public async Task Update() 
    {
        if (product is not null) {
            await EditProductUseCase.ExecuteAsync(product);
            NavigationManager.NavigateTo("/product-manager");
        }
    }
}
