@using AP.CoreBusiness
@using AP.UseCases.Activities.Interfaces
@using AP.UseCases.Inventories.Interfaces
@using AP.WebApp.Sections.Layouts.AdminPanelLayouts
@using AP.WebApp.Sections.Pages.Admin.Components.Common
@using AP.WebApp.ViewModels
@using static AP.WebApp.Sections.Pages.Admin.Components.Common.AutoCompleteComponent


@page "/admin/create-purchase"
@layout AdminLayout
@rendermode InteractiveServer

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IFetchInventoryByIdUseCase FetchInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase
@inject NavigationManager NavigationManager


<div class="inner-container">
    <div class="title-container">
        <h1>Purchase Inventory</h1>
    </div>
    <div class="content-container">
        <EditForm Model="purchaseViewModel" OnValidSubmit="SavePurchaseOrder">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div class="form-group">
                <label for="poNumber">PO Number</label>
                <InputText
                    id="po"
                    @bind-Value="purchaseViewModel.PONumber"
                    class="text-input"
                ></InputText>
            </div>

            <div class='form-group'>
                <AutoCompleteComponent
                    Label="Inventory"
                    SearchFunction="SearchInventory"
                    OnItemSelected="HandleItemSelected"
                ></AutoCompleteComponent>
            </div>

            <div class="form-group">
                <label>Quanitity</label>
                <InputNumber 
                    id='quanity'
                    @bind-Value="purchaseViewModel.QuantityToPurchase"
                    class="text-input"
                />
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputNumber 
                    id="price"
                    @bind-Value="purchaseViewModel.InventoryPrice"
                    class="text-input"
                />
            </div>

            <div class='button-container'>
                <button class="button" type="submit">Create Purchase Order</button>
            </div>
        
        </EditForm>
    </div>
</div>

@code {

    // Purchase View Model variable
    public PurchaseViewModel purchaseViewModel = new PurchaseViewModel();



    public List<ItemViewModel>? SearchInventory(string name){
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list is null) {
            return null;
        } 

        return (list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName }))?.ToList();
    }

    public ItemViewModel? itemSelected;
    public Inventory selectedInventory = new Inventory();
    public async void HandleItemSelected(ItemViewModel item) {
        purchaseViewModel.InventoryId = item.Id;
        
        selectedInventory = await FetchInventoryByIdUseCase.ExecuteAsync(purchaseViewModel.InventoryId);

        purchaseViewModel.InventoryPrice = selectedInventory is not null ? selectedInventory.Price : 0;
    }

    public async Task SavePurchaseOrder() {


        if (selectedInventory is null)
        {
            Console.WriteLine("No inventory selected.");
            return; // Or show a validation message
        }

        await PurchaseInventoryUseCase.ExecuteAsync(
            purchaseViewModel.PONumber,
            selectedInventory,
            purchaseViewModel.QuantityToPurchase,
            purchaseViewModel.InventoryPrice,
            "Test User"
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }

}
