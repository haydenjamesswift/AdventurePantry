<div class='container'>
    <label for='search'>@Label</label>
    <input 
        placeholder="Start typing..."
        type="text"
        class="text-input"
        @bind-value="userInput"
        @bind-value:event="oninput"
        @onkeyup="OnKeyUp"
    />
    @if (searchResults is not null && searchResults.Count > 0) {
        <div class='results-container'>
            @{
                int itemIndex = 0;

                foreach (var res in searchResults) {
                    <div 
                        @onclick="() => HandleSelectItem(res)" 
                        @key="@res.Id" 
                        class="@(itemIndex == currentItemIndex?"row selected":"row")"
                    >
                        <div class='cell'>@res.Name</div>
                    </div>
                    itemIndex++;
                }
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? selectedItem = null;

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private string _userInput = string.Empty;
    public string userInput { 
        get => _userInput; 
        set 
        {
            this._userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null) {
                searchResults = SearchFunction(_userInput);
            }
            
        }
    }

    public class ItemViewModel {

        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }


    public void HandleSelectItem(ItemViewModel? item) {

        ClearHighlighting(); 

        if (item is not null) {
            this.selectedItem = item;
            this.userInput = item?.Name??string.Empty;
            this.searchResults = null;
        }

        // Notify parent
        OnItemSelected.InvokeAsync(item);
    }

    public ItemViewModel? currentItem = null;
    public int currentItemIndex = -1;

    public void OnKeyUp(KeyboardEventArgs e) {
        if (searchResults is not null && searchResults.Count > 0 && (e.Code == "ArrowDown" || e.Code == "ArrowUp" || e.Code == "Enter")) {

            if (e.Code == "ArrowDown"  && currentItemIndex < searchResults.Count - 1) {
                currentItemIndex += 1;
                currentItem = searchResults[currentItemIndex];
            }

            else if (e.Code == "ArrowUp") {
                
                if (currentItemIndex > 0) {
                    currentItemIndex -= 1;
                    currentItem = searchResults[currentItemIndex];
                }
                else {
                    currentItemIndex = -1;
                    currentItem = null;
                }
            }

            if (e.Code == "Enter" || e.Code == "NumpadEnter") {
                HandleSelectItem(currentItem);
                ClearHighlighting();
            }
        }
    }

    public void ClearHighlighting() {
        currentItemIndex = -1;
        currentItem = null;
        searchResults = null;
    }

 }
